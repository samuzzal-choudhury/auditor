# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.stack_analyses_data import StackAnalysesData  # noqa: F401,E501
from swagger_server import util


class EcosystemData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, npm: StackAnalysesData=None, maven: StackAnalysesData=None, pypi: StackAnalysesData=None):  # noqa: E501
        """EcosystemData - a model defined in Swagger

        :param npm: The npm of this EcosystemData.  # noqa: E501
        :type npm: StackAnalysesData
        :param maven: The maven of this EcosystemData.  # noqa: E501
        :type maven: StackAnalysesData
        :param pypi: The pypi of this EcosystemData.  # noqa: E501
        :type pypi: StackAnalysesData
        """
        self.swagger_types = {
            'npm': StackAnalysesData,
            'maven': StackAnalysesData,
            'pypi': StackAnalysesData
        }

        self.attribute_map = {
            'npm': 'npm',
            'maven': 'maven',
            'pypi': 'pypi'
        }

        self._npm = npm
        self._maven = maven
        self._pypi = pypi

    @classmethod
    def from_dict(cls, dikt) -> 'EcosystemData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EcosystemData of this EcosystemData.  # noqa: E501
        :rtype: EcosystemData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def npm(self) -> StackAnalysesData:
        """Gets the npm of this EcosystemData.


        :return: The npm of this EcosystemData.
        :rtype: StackAnalysesData
        """
        return self._npm

    @npm.setter
    def npm(self, npm: StackAnalysesData):
        """Sets the npm of this EcosystemData.


        :param npm: The npm of this EcosystemData.
        :type npm: StackAnalysesData
        """

        self._npm = npm

    @property
    def maven(self) -> StackAnalysesData:
        """Gets the maven of this EcosystemData.


        :return: The maven of this EcosystemData.
        :rtype: StackAnalysesData
        """
        return self._maven

    @maven.setter
    def maven(self, maven: StackAnalysesData):
        """Sets the maven of this EcosystemData.


        :param maven: The maven of this EcosystemData.
        :type maven: StackAnalysesData
        """

        self._maven = maven

    @property
    def pypi(self) -> StackAnalysesData:
        """Gets the pypi of this EcosystemData.


        :return: The pypi of this EcosystemData.
        :rtype: StackAnalysesData
        """
        return self._pypi

    @pypi.setter
    def pypi(self, pypi: StackAnalysesData):
        """Sets the pypi of this EcosystemData.


        :param pypi: The pypi of this EcosystemData.
        :type pypi: StackAnalysesData
        """

        self._pypi = pypi
