# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.license import License  # noqa: F401,E501
from swagger_server.models.recommendation import Recommendation  # noqa: F401,E501
from swagger_server.models.security import Security  # noqa: F401,E501
from swagger_server.models.stack_analyses_count_per_source import StackAnalysesCountPerSource  # noqa: F401,E501
from swagger_server import util


class AggregatedData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, analyzed_stacks_count: int=None, analyzed_stacks_count_per_source: StackAnalysesCountPerSource=None, unique_analyzed_stacks_count: int=None, average_stack_processing_time: str=None, unknown_dependencies_ingested: int=None, license: License=None, security: Security=None, recommendation: Recommendation=None):  # noqa: E501
        """AggregatedData - a model defined in Swagger

        :param analyzed_stacks_count: The analyzed_stacks_count of this AggregatedData.  # noqa: E501
        :type analyzed_stacks_count: int
        :param analyzed_stacks_count_per_source: The analyzed_stacks_count_per_source of this AggregatedData.  # noqa: E501
        :type analyzed_stacks_count_per_source: StackAnalysesCountPerSource
        :param unique_analyzed_stacks_count: The unique_analyzed_stacks_count of this AggregatedData.  # noqa: E501
        :type unique_analyzed_stacks_count: int
        :param average_stack_processing_time: The average_stack_processing_time of this AggregatedData.  # noqa: E501
        :type average_stack_processing_time: str
        :param unknown_dependencies_ingested: The unknown_dependencies_ingested of this AggregatedData.  # noqa: E501
        :type unknown_dependencies_ingested: int
        :param license: The license of this AggregatedData.  # noqa: E501
        :type license: License
        :param security: The security of this AggregatedData.  # noqa: E501
        :type security: Security
        :param recommendation: The recommendation of this AggregatedData.  # noqa: E501
        :type recommendation: Recommendation
        """
        self.swagger_types = {
            'analyzed_stacks_count': int,
            'analyzed_stacks_count_per_source': StackAnalysesCountPerSource,
            'unique_analyzed_stacks_count': int,
            'average_stack_processing_time': str,
            'unknown_dependencies_ingested': int,
            'license': License,
            'security': Security,
            'recommendation': Recommendation
        }

        self.attribute_map = {
            'analyzed_stacks_count': 'analyzed_stacks_count',
            'analyzed_stacks_count_per_source': 'analyzed_stacks_count_per_source',
            'unique_analyzed_stacks_count': 'unique_analyzed_stacks_count',
            'average_stack_processing_time': 'average_stack_processing_time',
            'unknown_dependencies_ingested': 'unknown_dependencies_ingested',
            'license': 'license',
            'security': 'security',
            'recommendation': 'recommendation'
        }

        self._analyzed_stacks_count = analyzed_stacks_count
        self._analyzed_stacks_count_per_source = analyzed_stacks_count_per_source
        self._unique_analyzed_stacks_count = unique_analyzed_stacks_count
        self._average_stack_processing_time = average_stack_processing_time
        self._unknown_dependencies_ingested = unknown_dependencies_ingested
        self._license = license
        self._security = security
        self._recommendation = recommendation

    @classmethod
    def from_dict(cls, dikt) -> 'AggregatedData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AggregatedData of this AggregatedData.  # noqa: E501
        :rtype: AggregatedData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed_stacks_count(self) -> int:
        """Gets the analyzed_stacks_count of this AggregatedData.


        :return: The analyzed_stacks_count of this AggregatedData.
        :rtype: int
        """
        return self._analyzed_stacks_count

    @analyzed_stacks_count.setter
    def analyzed_stacks_count(self, analyzed_stacks_count: int):
        """Sets the analyzed_stacks_count of this AggregatedData.


        :param analyzed_stacks_count: The analyzed_stacks_count of this AggregatedData.
        :type analyzed_stacks_count: int
        """

        self._analyzed_stacks_count = analyzed_stacks_count

    @property
    def analyzed_stacks_count_per_source(self) -> StackAnalysesCountPerSource:
        """Gets the analyzed_stacks_count_per_source of this AggregatedData.


        :return: The analyzed_stacks_count_per_source of this AggregatedData.
        :rtype: StackAnalysesCountPerSource
        """
        return self._analyzed_stacks_count_per_source

    @analyzed_stacks_count_per_source.setter
    def analyzed_stacks_count_per_source(self, analyzed_stacks_count_per_source: StackAnalysesCountPerSource):
        """Sets the analyzed_stacks_count_per_source of this AggregatedData.


        :param analyzed_stacks_count_per_source: The analyzed_stacks_count_per_source of this AggregatedData.
        :type analyzed_stacks_count_per_source: StackAnalysesCountPerSource
        """

        self._analyzed_stacks_count_per_source = analyzed_stacks_count_per_source

    @property
    def unique_analyzed_stacks_count(self) -> int:
        """Gets the unique_analyzed_stacks_count of this AggregatedData.


        :return: The unique_analyzed_stacks_count of this AggregatedData.
        :rtype: int
        """
        return self._unique_analyzed_stacks_count

    @unique_analyzed_stacks_count.setter
    def unique_analyzed_stacks_count(self, unique_analyzed_stacks_count: int):
        """Sets the unique_analyzed_stacks_count of this AggregatedData.


        :param unique_analyzed_stacks_count: The unique_analyzed_stacks_count of this AggregatedData.
        :type unique_analyzed_stacks_count: int
        """

        self._unique_analyzed_stacks_count = unique_analyzed_stacks_count

    @property
    def average_stack_processing_time(self) -> str:
        """Gets the average_stack_processing_time of this AggregatedData.


        :return: The average_stack_processing_time of this AggregatedData.
        :rtype: str
        """
        return self._average_stack_processing_time

    @average_stack_processing_time.setter
    def average_stack_processing_time(self, average_stack_processing_time: str):
        """Sets the average_stack_processing_time of this AggregatedData.


        :param average_stack_processing_time: The average_stack_processing_time of this AggregatedData.
        :type average_stack_processing_time: str
        """

        self._average_stack_processing_time = average_stack_processing_time

    @property
    def unknown_dependencies_ingested(self) -> int:
        """Gets the unknown_dependencies_ingested of this AggregatedData.


        :return: The unknown_dependencies_ingested of this AggregatedData.
        :rtype: int
        """
        return self._unknown_dependencies_ingested

    @unknown_dependencies_ingested.setter
    def unknown_dependencies_ingested(self, unknown_dependencies_ingested: int):
        """Sets the unknown_dependencies_ingested of this AggregatedData.


        :param unknown_dependencies_ingested: The unknown_dependencies_ingested of this AggregatedData.
        :type unknown_dependencies_ingested: int
        """

        self._unknown_dependencies_ingested = unknown_dependencies_ingested

    @property
    def license(self) -> License:
        """Gets the license of this AggregatedData.


        :return: The license of this AggregatedData.
        :rtype: License
        """
        return self._license

    @license.setter
    def license(self, license: License):
        """Sets the license of this AggregatedData.


        :param license: The license of this AggregatedData.
        :type license: License
        """

        self._license = license

    @property
    def security(self) -> Security:
        """Gets the security of this AggregatedData.


        :return: The security of this AggregatedData.
        :rtype: Security
        """
        return self._security

    @security.setter
    def security(self, security: Security):
        """Sets the security of this AggregatedData.


        :param security: The security of this AggregatedData.
        :type security: Security
        """

        self._security = security

    @property
    def recommendation(self) -> Recommendation:
        """Gets the recommendation of this AggregatedData.


        :return: The recommendation of this AggregatedData.
        :rtype: Recommendation
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation: Recommendation):
        """Sets the recommendation of this AggregatedData.


        :param recommendation: The recommendation of this AggregatedData.
        :type recommendation: Recommendation
        """

        self._recommendation = recommendation
