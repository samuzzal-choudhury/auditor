# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.aggregated_data import AggregatedData  # noqa: F401,E501
from swagger_server.models.ecosystem_data import EcosystemData  # noqa: F401,E501
from swagger_server.models.metadata import Metadata  # noqa: F401,E501
from swagger_server import util


class OverviewReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, meta: Metadata=None, generation_time: str=None, _from: str=None, to: str=None, ecosystem_data: EcosystemData=None, aggregated_data: AggregatedData=None):  # noqa: E501
        """OverviewReport - a model defined in Swagger

        :param meta: The meta of this OverviewReport.  # noqa: E501
        :type meta: Metadata
        :param generation_time: The generation_time of this OverviewReport.  # noqa: E501
        :type generation_time: str
        :param _from: The _from of this OverviewReport.  # noqa: E501
        :type _from: str
        :param to: The to of this OverviewReport.  # noqa: E501
        :type to: str
        :param ecosystem_data: The ecosystem_data of this OverviewReport.  # noqa: E501
        :type ecosystem_data: EcosystemData
        :param aggregated_data: The aggregated_data of this OverviewReport.  # noqa: E501
        :type aggregated_data: AggregatedData
        """
        self.swagger_types = {
            'meta': Metadata,
            'generation_time': str,
            '_from': str,
            'to': str,
            'ecosystem_data': EcosystemData,
            'aggregated_data': AggregatedData
        }

        self.attribute_map = {
            'meta': 'meta',
            'generation_time': 'generation_time',
            '_from': 'from',
            'to': 'to',
            'ecosystem_data': 'ecosystem_data',
            'aggregated_data': 'aggregated_data'
        }

        self._meta = meta
        self._generation_time = generation_time
        self.__from = _from
        self._to = to
        self._ecosystem_data = ecosystem_data
        self._aggregated_data = aggregated_data

    @classmethod
    def from_dict(cls, dikt) -> 'OverviewReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OverviewReport of this OverviewReport.  # noqa: E501
        :rtype: OverviewReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self) -> Metadata:
        """Gets the meta of this OverviewReport.


        :return: The meta of this OverviewReport.
        :rtype: Metadata
        """
        return self._meta

    @meta.setter
    def meta(self, meta: Metadata):
        """Sets the meta of this OverviewReport.


        :param meta: The meta of this OverviewReport.
        :type meta: Metadata
        """

        self._meta = meta

    @property
    def generation_time(self) -> str:
        """Gets the generation_time of this OverviewReport.

        UTC time of the report generation in the format yyyy-mm-ddThh:mm:ss  # noqa: E501

        :return: The generation_time of this OverviewReport.
        :rtype: str
        """
        return self._generation_time

    @generation_time.setter
    def generation_time(self, generation_time: str):
        """Sets the generation_time of this OverviewReport.

        UTC time of the report generation in the format yyyy-mm-ddThh:mm:ss  # noqa: E501

        :param generation_time: The generation_time of this OverviewReport.
        :type generation_time: str
        """

        self._generation_time = generation_time

    @property
    def _from(self) -> str:
        """Gets the _from of this OverviewReport.

        time since when the stack analyses requests are to be considered for reporting. The time has to be in UTC in the format yyyy-mm-ddThh:mm:ss  # noqa: E501

        :return: The _from of this OverviewReport.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this OverviewReport.

        time since when the stack analyses requests are to be considered for reporting. The time has to be in UTC in the format yyyy-mm-ddThh:mm:ss  # noqa: E501

        :param _from: The _from of this OverviewReport.
        :type _from: str
        """

        self.__from = _from

    @property
    def to(self) -> str:
        """Gets the to of this OverviewReport.

        time until which the stack analyses requests are to be considered for reporting. The time has to be in UTC in the format yyyy-mm-ddThh:mm:ss  # noqa: E501

        :return: The to of this OverviewReport.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this OverviewReport.

        time until which the stack analyses requests are to be considered for reporting. The time has to be in UTC in the format yyyy-mm-ddThh:mm:ss  # noqa: E501

        :param to: The to of this OverviewReport.
        :type to: str
        """

        self._to = to

    @property
    def ecosystem_data(self) -> EcosystemData:
        """Gets the ecosystem_data of this OverviewReport.


        :return: The ecosystem_data of this OverviewReport.
        :rtype: EcosystemData
        """
        return self._ecosystem_data

    @ecosystem_data.setter
    def ecosystem_data(self, ecosystem_data: EcosystemData):
        """Sets the ecosystem_data of this OverviewReport.


        :param ecosystem_data: The ecosystem_data of this OverviewReport.
        :type ecosystem_data: EcosystemData
        """

        self._ecosystem_data = ecosystem_data

    @property
    def aggregated_data(self) -> AggregatedData:
        """Gets the aggregated_data of this OverviewReport.


        :return: The aggregated_data of this OverviewReport.
        :rtype: AggregatedData
        """
        return self._aggregated_data

    @aggregated_data.setter
    def aggregated_data(self, aggregated_data: AggregatedData):
        """Sets the aggregated_data of this OverviewReport.


        :param aggregated_data: The aggregated_data of this OverviewReport.
        :type aggregated_data: AggregatedData
        """

        self._aggregated_data = aggregated_data
