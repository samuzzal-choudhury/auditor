# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.recommendation import Recommendation  # noqa: F401,E501
from swagger_server.models.stack_analyses_count_per_source import StackAnalysesCountPerSource  # noqa: F401,E501
from swagger_server.models.top_large_stack import TopLargeStack  # noqa: F401,E501
from swagger_server import util


class StackAnalysesData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, analyzed_stacks_count: str=None, analyzed_stacks_count_per_source: StackAnalysesCountPerSource=None, unique_analyzed_stacks_count: int=None, top_large_stacks: List[TopLargeStack]=None, top_dependencies_list: List[str]=None, average_stack_processing_time: str=None, unknown_dependencies_ingested: int=None, recommendation: Recommendation=None):  # noqa: E501
        """StackAnalysesData - a model defined in Swagger

        :param analyzed_stacks_count: The analyzed_stacks_count of this StackAnalysesData.  # noqa: E501
        :type analyzed_stacks_count: str
        :param analyzed_stacks_count_per_source: The analyzed_stacks_count_per_source of this StackAnalysesData.  # noqa: E501
        :type analyzed_stacks_count_per_source: StackAnalysesCountPerSource
        :param unique_analyzed_stacks_count: The unique_analyzed_stacks_count of this StackAnalysesData.  # noqa: E501
        :type unique_analyzed_stacks_count: int
        :param top_large_stacks: The top_large_stacks of this StackAnalysesData.  # noqa: E501
        :type top_large_stacks: List[TopLargeStack]
        :param top_dependencies_list: The top_dependencies_list of this StackAnalysesData.  # noqa: E501
        :type top_dependencies_list: List[str]
        :param average_stack_processing_time: The average_stack_processing_time of this StackAnalysesData.  # noqa: E501
        :type average_stack_processing_time: str
        :param unknown_dependencies_ingested: The unknown_dependencies_ingested of this StackAnalysesData.  # noqa: E501
        :type unknown_dependencies_ingested: int
        :param recommendation: The recommendation of this StackAnalysesData.  # noqa: E501
        :type recommendation: Recommendation
        """
        self.swagger_types = {
            'analyzed_stacks_count': str,
            'analyzed_stacks_count_per_source': StackAnalysesCountPerSource,
            'unique_analyzed_stacks_count': int,
            'top_large_stacks': List[TopLargeStack],
            'top_dependencies_list': List[str],
            'average_stack_processing_time': str,
            'unknown_dependencies_ingested': int,
            'recommendation': Recommendation
        }

        self.attribute_map = {
            'analyzed_stacks_count': 'analyzed_stacks_count',
            'analyzed_stacks_count_per_source': 'analyzed_stacks_count_per_source',
            'unique_analyzed_stacks_count': 'unique_analyzed_stacks_count',
            'top_large_stacks': 'top_large_stacks',
            'top_dependencies_list': 'top_dependencies_list',
            'average_stack_processing_time': 'average_stack_processing_time',
            'unknown_dependencies_ingested': 'unknown_dependencies_ingested',
            'recommendation': 'recommendation'
        }

        self._analyzed_stacks_count = analyzed_stacks_count
        self._analyzed_stacks_count_per_source = analyzed_stacks_count_per_source
        self._unique_analyzed_stacks_count = unique_analyzed_stacks_count
        self._top_large_stacks = top_large_stacks
        self._top_dependencies_list = top_dependencies_list
        self._average_stack_processing_time = average_stack_processing_time
        self._unknown_dependencies_ingested = unknown_dependencies_ingested
        self._recommendation = recommendation

    @classmethod
    def from_dict(cls, dikt) -> 'StackAnalysesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StackAnalysesData of this StackAnalysesData.  # noqa: E501
        :rtype: StackAnalysesData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analyzed_stacks_count(self) -> str:
        """Gets the analyzed_stacks_count of this StackAnalysesData.


        :return: The analyzed_stacks_count of this StackAnalysesData.
        :rtype: str
        """
        return self._analyzed_stacks_count

    @analyzed_stacks_count.setter
    def analyzed_stacks_count(self, analyzed_stacks_count: str):
        """Sets the analyzed_stacks_count of this StackAnalysesData.


        :param analyzed_stacks_count: The analyzed_stacks_count of this StackAnalysesData.
        :type analyzed_stacks_count: str
        """

        self._analyzed_stacks_count = analyzed_stacks_count

    @property
    def analyzed_stacks_count_per_source(self) -> StackAnalysesCountPerSource:
        """Gets the analyzed_stacks_count_per_source of this StackAnalysesData.


        :return: The analyzed_stacks_count_per_source of this StackAnalysesData.
        :rtype: StackAnalysesCountPerSource
        """
        return self._analyzed_stacks_count_per_source

    @analyzed_stacks_count_per_source.setter
    def analyzed_stacks_count_per_source(self, analyzed_stacks_count_per_source: StackAnalysesCountPerSource):
        """Sets the analyzed_stacks_count_per_source of this StackAnalysesData.


        :param analyzed_stacks_count_per_source: The analyzed_stacks_count_per_source of this StackAnalysesData.
        :type analyzed_stacks_count_per_source: StackAnalysesCountPerSource
        """

        self._analyzed_stacks_count_per_source = analyzed_stacks_count_per_source

    @property
    def unique_analyzed_stacks_count(self) -> int:
        """Gets the unique_analyzed_stacks_count of this StackAnalysesData.


        :return: The unique_analyzed_stacks_count of this StackAnalysesData.
        :rtype: int
        """
        return self._unique_analyzed_stacks_count

    @unique_analyzed_stacks_count.setter
    def unique_analyzed_stacks_count(self, unique_analyzed_stacks_count: int):
        """Sets the unique_analyzed_stacks_count of this StackAnalysesData.


        :param unique_analyzed_stacks_count: The unique_analyzed_stacks_count of this StackAnalysesData.
        :type unique_analyzed_stacks_count: int
        """

        self._unique_analyzed_stacks_count = unique_analyzed_stacks_count

    @property
    def top_large_stacks(self) -> List[TopLargeStack]:
        """Gets the top_large_stacks of this StackAnalysesData.


        :return: The top_large_stacks of this StackAnalysesData.
        :rtype: List[TopLargeStack]
        """
        return self._top_large_stacks

    @top_large_stacks.setter
    def top_large_stacks(self, top_large_stacks: List[TopLargeStack]):
        """Sets the top_large_stacks of this StackAnalysesData.


        :param top_large_stacks: The top_large_stacks of this StackAnalysesData.
        :type top_large_stacks: List[TopLargeStack]
        """

        self._top_large_stacks = top_large_stacks

    @property
    def top_dependencies_list(self) -> List[str]:
        """Gets the top_dependencies_list of this StackAnalysesData.


        :return: The top_dependencies_list of this StackAnalysesData.
        :rtype: List[str]
        """
        return self._top_dependencies_list

    @top_dependencies_list.setter
    def top_dependencies_list(self, top_dependencies_list: List[str]):
        """Sets the top_dependencies_list of this StackAnalysesData.


        :param top_dependencies_list: The top_dependencies_list of this StackAnalysesData.
        :type top_dependencies_list: List[str]
        """

        self._top_dependencies_list = top_dependencies_list

    @property
    def average_stack_processing_time(self) -> str:
        """Gets the average_stack_processing_time of this StackAnalysesData.


        :return: The average_stack_processing_time of this StackAnalysesData.
        :rtype: str
        """
        return self._average_stack_processing_time

    @average_stack_processing_time.setter
    def average_stack_processing_time(self, average_stack_processing_time: str):
        """Sets the average_stack_processing_time of this StackAnalysesData.


        :param average_stack_processing_time: The average_stack_processing_time of this StackAnalysesData.
        :type average_stack_processing_time: str
        """

        self._average_stack_processing_time = average_stack_processing_time

    @property
    def unknown_dependencies_ingested(self) -> int:
        """Gets the unknown_dependencies_ingested of this StackAnalysesData.


        :return: The unknown_dependencies_ingested of this StackAnalysesData.
        :rtype: int
        """
        return self._unknown_dependencies_ingested

    @unknown_dependencies_ingested.setter
    def unknown_dependencies_ingested(self, unknown_dependencies_ingested: int):
        """Sets the unknown_dependencies_ingested of this StackAnalysesData.


        :param unknown_dependencies_ingested: The unknown_dependencies_ingested of this StackAnalysesData.
        :type unknown_dependencies_ingested: int
        """

        self._unknown_dependencies_ingested = unknown_dependencies_ingested

    @property
    def recommendation(self) -> Recommendation:
        """Gets the recommendation of this StackAnalysesData.


        :return: The recommendation of this StackAnalysesData.
        :rtype: Recommendation
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation: Recommendation):
        """Sets the recommendation of this StackAnalysesData.


        :param recommendation: The recommendation of this StackAnalysesData.
        :type recommendation: Recommendation
        """

        self._recommendation = recommendation
