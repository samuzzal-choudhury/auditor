# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Companion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, recommendation_count: str=None, positive_user_feedback_count: str=None, negative_user_feedback_count: str=None, maximum_confidence_score: str=None, average_confidence_score: str=None):  # noqa: E501
        """Companion - a model defined in Swagger

        :param recommendation_count: The recommendation_count of this Companion.  # noqa: E501
        :type recommendation_count: str
        :param positive_user_feedback_count: The positive_user_feedback_count of this Companion.  # noqa: E501
        :type positive_user_feedback_count: str
        :param negative_user_feedback_count: The negative_user_feedback_count of this Companion.  # noqa: E501
        :type negative_user_feedback_count: str
        :param maximum_confidence_score: The maximum_confidence_score of this Companion.  # noqa: E501
        :type maximum_confidence_score: str
        :param average_confidence_score: The average_confidence_score of this Companion.  # noqa: E501
        :type average_confidence_score: str
        """
        self.swagger_types = {
            'recommendation_count': str,
            'positive_user_feedback_count': str,
            'negative_user_feedback_count': str,
            'maximum_confidence_score': str,
            'average_confidence_score': str
        }

        self.attribute_map = {
            'recommendation_count': 'recommendation_count',
            'positive_user_feedback_count': 'positive_user_feedback_count',
            'negative_user_feedback_count': 'negative_user_feedback_count',
            'maximum_confidence_score': 'maximum_confidence_score',
            'average_confidence_score': 'average_confidence_score'
        }

        self._recommendation_count = recommendation_count
        self._positive_user_feedback_count = positive_user_feedback_count
        self._negative_user_feedback_count = negative_user_feedback_count
        self._maximum_confidence_score = maximum_confidence_score
        self._average_confidence_score = average_confidence_score

    @classmethod
    def from_dict(cls, dikt) -> 'Companion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Companion of this Companion.  # noqa: E501
        :rtype: Companion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_count(self) -> str:
        """Gets the recommendation_count of this Companion.


        :return: The recommendation_count of this Companion.
        :rtype: str
        """
        return self._recommendation_count

    @recommendation_count.setter
    def recommendation_count(self, recommendation_count: str):
        """Sets the recommendation_count of this Companion.


        :param recommendation_count: The recommendation_count of this Companion.
        :type recommendation_count: str
        """

        self._recommendation_count = recommendation_count

    @property
    def positive_user_feedback_count(self) -> str:
        """Gets the positive_user_feedback_count of this Companion.


        :return: The positive_user_feedback_count of this Companion.
        :rtype: str
        """
        return self._positive_user_feedback_count

    @positive_user_feedback_count.setter
    def positive_user_feedback_count(self, positive_user_feedback_count: str):
        """Sets the positive_user_feedback_count of this Companion.


        :param positive_user_feedback_count: The positive_user_feedback_count of this Companion.
        :type positive_user_feedback_count: str
        """

        self._positive_user_feedback_count = positive_user_feedback_count

    @property
    def negative_user_feedback_count(self) -> str:
        """Gets the negative_user_feedback_count of this Companion.


        :return: The negative_user_feedback_count of this Companion.
        :rtype: str
        """
        return self._negative_user_feedback_count

    @negative_user_feedback_count.setter
    def negative_user_feedback_count(self, negative_user_feedback_count: str):
        """Sets the negative_user_feedback_count of this Companion.


        :param negative_user_feedback_count: The negative_user_feedback_count of this Companion.
        :type negative_user_feedback_count: str
        """

        self._negative_user_feedback_count = negative_user_feedback_count

    @property
    def maximum_confidence_score(self) -> str:
        """Gets the maximum_confidence_score of this Companion.


        :return: The maximum_confidence_score of this Companion.
        :rtype: str
        """
        return self._maximum_confidence_score

    @maximum_confidence_score.setter
    def maximum_confidence_score(self, maximum_confidence_score: str):
        """Sets the maximum_confidence_score of this Companion.


        :param maximum_confidence_score: The maximum_confidence_score of this Companion.
        :type maximum_confidence_score: str
        """

        self._maximum_confidence_score = maximum_confidence_score

    @property
    def average_confidence_score(self) -> str:
        """Gets the average_confidence_score of this Companion.


        :return: The average_confidence_score of this Companion.
        :rtype: str
        """
        return self._average_confidence_score

    @average_confidence_score.setter
    def average_confidence_score(self, average_confidence_score: str):
        """Sets the average_confidence_score of this Companion.


        :param average_confidence_score: The average_confidence_score of this Companion.
        :type average_confidence_score: str
        """

        self._average_confidence_score = average_confidence_score
